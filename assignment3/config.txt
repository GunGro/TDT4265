(conv relu conv relu pool) * 3

        self.conv_layers = nn.Sequential(
            nn.Conv2d(image_channels, num_filters, kernel_size=5,stride=1,padding=2)
          ,nn.ReLU()
          ,nn.Conv2d(num_filters, num_filters, kernel_size=5,stride=1,padding=2)
          ,nn.ReLU()
          ,nn.MaxPool2d(2, 2)
          ,nn.Conv2d(num_filters, num_filters*2, kernel_size=5,stride=1,padding=2)
          ,nn.ReLU()
          ,nn.Conv2d(num_filters*2, num_filters*2, kernel_size=5,stride=1,padding=2)
          ,nn.ReLU()
          ,nn.MaxPool2d(2, 2)
          ,nn.Conv2d(num_filters*2, num_filters*4, kernel_size=5,stride=1,padding=2)
          ,nn.ReLU()
          ,nn.Conv2d(num_filters*4, num_filters*4, kernel_size=5,stride=1,padding=2)
          ,nn.ReLU()
          ,nn.MaxPool2d(2, 2)
        )
        self.linear_layers = nn.Sequential(
            nn.Linear(num_filters**2*2, 60)
            ,nn.ReLU()
            ,nn.Linear(60, 10)
            ,nn.ReLU()
        )



Training accuracy and loss was: 0.8571968349928877  and  tensor(0.4154, device='cuda:0')
Validation accuracy and loss was: 0.7598  and  tensor(0.7926, device='cuda:0')
Test accuracy and loss was: 0.7553  and  tensor(0.8048, device='cuda:0')


with batchnorms: 


        self.conv_layers = nn.Sequential(
           nn.Conv2d(image_channels, num_filters, kernel_size=5,stride=1,padding=2)
          ,nn.BatchNorm2d(num_filters)
          ,nn.ReLU()
          ,nn.Conv2d(num_filters, num_filters, kernel_size=5,stride=1,padding=2)
          ,nn.BatchNorm2d(num_filters)
          ,nn.ReLU()
          ,nn.MaxPool2d(2, 2)
          ,nn.Conv2d(num_filters, num_filters*2, kernel_size=5,stride=1,padding=2)
          ,nn.BatchNorm2d(num_filters*2)
          ,nn.ReLU()
          ,nn.Conv2d(num_filters*2, num_filters*2, kernel_size=5,stride=1,padding=2)
          ,nn.BatchNorm2d(num_filters*2)
          ,nn.ReLU()
          ,nn.MaxPool2d(2, 2)
          ,nn.Conv2d(num_filters*2, num_filters*4, kernel_size=5,stride=1,padding=2)
          ,nn.BatchNorm2d(num_filters*4)
          ,nn.ReLU()
          ,nn.Conv2d(num_filters*4, num_filters*4, kernel_size=5,stride=1,padding=2)
          ,nn.BatchNorm2d(num_filters*4)
          ,nn.ReLU()
          ,nn.MaxPool2d(2, 2)
        )
        self.linear_layers = nn.Sequential(
            nn.Linear(num_filters**2*2, 60)
            ,nn.ReLU()
            ,nn.Linear(60, 10)
            ,nn.ReLU()
        )

Training accuracy and loss was: 0.8814900426742532  and  tensor(0.3495, device='cuda:0')
Validation accuracy and loss was: 0.798  and  tensor(0.6098, device='cuda:0')
Test accuracy and loss was: 0.8009  and  tensor(0.6095, device='cuda:0')